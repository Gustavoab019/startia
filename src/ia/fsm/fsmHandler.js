// src/ia/fsm/fsmHandler.js - VERS√ÉO COMPLETA COM CORRE√á√ÉO DE NOME

const mongoose = require('mongoose');
const estadoMenu = require('./estadoMenu');
const estadoCriandoObra = require('./obra/estadoCriandoObra');
const estadoEntrandoObra = require('./obra/estadoEntrandoObra');
const estadoEmObra = require('./obra/estadoEmObra');
const estadoVerTarefas = require('./tarefa/estadoVerTarefas');
const estadoCriandoTarefa = require('./tarefa/estadoCriandoTarefa');
const estadoCadastrarColaborador = require('./colaborador/estadoCadastrarColaborador');
const estadoVerColaboradores = require('./colaborador/estadoVerColaboradores');
const estadoRegistrarPresenca = require('./presenca/estadoRegistrarPresenca');
const estadoGuiaStartIA = require('./colaborador/estadoGuiaStartIA');
// Imports para problemas
const estadoRelatandoProblema = require('./problema/estadoRelatandoProblema');
const estadoVerProblemas = require('./problema/estadoVerProblemas');
// Import para detalhes da tarefa
const estadoVerTarefaDetalhe = require('./tarefa/estadoVerTarefaDetalhe');

// Imports dos utilit√°rios
const { gerarResumoContextual } = require('../../utils/gerarResumoContextual');
const { gerarAjudaContextual } = require('../../utils/ajudaContextual');

// ‚úÖ IMPORTS DO SERVICE DE COLABORADOR ATUALIZADO
const { 
  obterSaudacao, 
  obterNomeExibicao, 
  precisaDefinirNome,
  definirNomeColaborador 
} = require('../../domains/colaborador/colaborador.service');

async function fsmResponder(colaborador, mensagem, contexto) {
  // Garantir que mensagem seja uma string, independente do formato recebido
  let mensagemTexto;
  
  if (typeof mensagem === 'string') {
    mensagemTexto = mensagem;
  } else if (mensagem && typeof mensagem === 'object') {
    if (mensagem.message) {
      mensagemTexto = mensagem.message;
    } else {
      mensagemTexto = JSON.stringify(mensagem);
    }
  } else {
    mensagemTexto = String(mensagem || '');
  }
  
  const comando = mensagemTexto.trim().toLowerCase();
  console.log(`üîç Comando processado: "${comando}"`);

  // ‚úÖ USAR FUN√á√ÉO DO SERVICE PARA SAUDA√á√ÉO
  const saudacao = obterSaudacao(colaborador);
  const nomeExibicao = obterNomeExibicao(colaborador);

  // ===== COMANDOS GLOBAIS =====
  
  // 1. Comando de ajuda
  if (['ajuda', 'help', '?'].includes(comando)) {
    return {
      resposta: gerarAjudaContextual(colaborador.etapaCadastro),
      etapaNova: colaborador.etapaCadastro // Mant√©m o estado atual
    };
  }
  
  // 2. Comando de status/onde estou
  if (['status', 'onde estou', 'contexto'].includes(comando)) {
    const resumoContextual = await gerarResumoContextual(colaborador);
    return {
      resposta: `üì± *SEU STATUS ATUAL:*

${resumoContextual}

üí° Digite "ajuda" para ver os comandos dispon√≠veis.`,
      etapaNova: colaborador.etapaCadastro // Mant√©m o estado atual
    };
  }
  
  // ‚úÖ 3. COMANDO PARA ATUALIZAR NOME
  if (comando.startsWith('meu nome √© ') || comando.startsWith('nome ')) {
    const novoNome = comando.replace(/^(meu nome √© |nome )/i, '').trim();
    
    if (novoNome.length >= 2) {
      try {
        await definirNomeColaborador(colaborador._id, novoNome);
        
        return {
          resposta: `‚úÖ *NOME ATUALIZADO COM SUCESSO!*

Agora voc√™ √©: *${novoNome}*

Digite "menu" para continuar ou qualquer outra op√ß√£o.`,
          etapaNova: colaborador.etapaCadastro
        };
      } catch (error) {
        console.error('‚ùå Erro ao atualizar nome:', error);
        return {
          resposta: `‚ùå Erro ao atualizar nome. Tente novamente.

üí° Use: "meu nome √© Jo√£o Silva"`,
          etapaNova: colaborador.etapaCadastro
        };
      }
    } else {
      return {
        resposta: `‚ö†Ô∏è Nome deve ter pelo menos 2 caracteres.

üí° Use: "meu nome √© Jo√£o Silva"`,
        etapaNova: colaborador.etapaCadastro
      };
    }
  }
  
  // 4. Verificar cancelamento de fluxos
  if (['cancelar', 'cancel'].includes(comando)) {
    // Estados que fazem parte de um fluxo que pode ser cancelado
    const estadosFluxo = [
      'criando_obra_nome', 'criando_obra_endereco', 'criando_obra_almoco_inicio',
      'criando_obra_almoco_hora_inicio', 'criando_obra_almoco_hora_fim', 'confirmando_obra_duplicata',
      'criando_tarefa_titulo', 'criando_tarefa_descricao', 'criando_tarefa_prazo', 'criando_tarefa_atribuicao',
      'cadastrando_colab_nome', 'cadastrando_colab_telefone', 'cadastrando_colab_tipo', 'cadastrando_colab_funcao',
      'relatando_problema_descricao', 'relatando_problema_foto',
      'coletando_nome' // ‚úÖ ADICIONAR NOVO ESTADO
    ];
    
    if (estadosFluxo.includes(colaborador.etapaCadastro)) {
      // Limpar campos tempor√°rios com base no tipo de fluxo
      if (colaborador.etapaCadastro.startsWith('criando_obra_') || colaborador.etapaCadastro === 'confirmando_obra_duplicata') {
        colaborador.tempNomeObra = undefined;
        colaborador.tempEnderecoObra = undefined;
        colaborador.tempHoraInicioAlmoco = undefined;
        colaborador.tempHoraFimAlmoco = undefined;
      } else if (colaborador.etapaCadastro.startsWith('criando_tarefa_')) {
        colaborador.tempTituloTarefa = undefined;
        colaborador.tempDescricaoTarefa = undefined;
        colaborador.tempPrazoTarefa = undefined;
        colaborador.tempColaboradoresDisponiveis = undefined;
      } else if (colaborador.etapaCadastro.startsWith('cadastrando_colab_')) {
        colaborador.tempNovoNome = undefined;
        colaborador.tempNovoTelefone = undefined;
        colaborador.tempNovoTipo = undefined;
        colaborador.tempNovoFuncao = undefined;
      } else if (colaborador.etapaCadastro.startsWith('relatando_problema_')) {
        colaborador.tempDescricaoProblema = undefined;
      }
      
      // Salvar as altera√ß√µes
      await colaborador.save();
      
      return {
        resposta: `‚ùå OPERA√á√ÉO CANCELADA

${saudacao} Voc√™ cancelou a opera√ß√£o atual.
Voltando ao menu principal.

Digite qualquer coisa para ver as op√ß√µes.`,
        etapaNova: 'menu'
      };
    }
  }

  // ===== ONBOARDING INICIAL =====
  
  if (colaborador.etapaCadastro === 'novo') {
    // ‚úÖ VERIFICAR SE COLABORADOR PRECISA DEFINIR NOME
    if (precisaDefinirNome(colaborador)) {
      return {
        resposta: `üë∑‚Äç‚ôÇÔ∏è *BEM-VINDO AO STARTIA!*

Ol√°! Sou seu assistente de obras via WhatsApp.

Antes de come√ßar, preciso saber seu nome.
üë§ *Como voc√™ gostaria de ser chamado?*

(Ex: "Jo√£o Silva" ou "Maria")`,
        etapaNova: 'coletando_nome'
      };
    }
    
    // Se j√° tem nome, ir direto para menu
    colaborador.etapaCadastro = 'menu';
    await colaborador.save();

    return {
      resposta: `üë∑‚Äç‚ôÇÔ∏è *BEM-VINDO DE VOLTA AO STARTIA!*

${saudacao} Sou seu assistente de obras via WhatsApp.

Comigo, voc√™ pode:
‚úîÔ∏è Criar e organizar obras  
‚úîÔ∏è Cadastrar e acompanhar tarefas  
‚úîÔ∏è Controlar presen√ßas da equipe  
‚úîÔ∏è Visualizar tudo com clareza

üéØ Nosso objetivo √© evitar bagun√ßa e melhorar a comunica√ß√£o na sua obra.

Vamos come√ßar?

üìã MENU INICIAL:
1Ô∏è‚É£ Criar nova obra  
2Ô∏è‚É£ Entrar em uma obra existente

üí° Digite "ajuda" a qualquer momento para ver os comandos dispon√≠veis.`,
      etapaNova: 'menu'
    };
  }

  // ===== COMANDOS UNIVERSAIS =====
  
  if (['menu', 'voltar', 'in√≠cio', 'inicio', '0'].includes(comando)) {
    // Limpar quaisquer dados tempor√°rios de navega√ß√£o
    colaborador.tempTarefasIds = undefined;
    colaborador.tempTarefaSelecionadaId = undefined;
    colaborador.tempIndicesPorTarefa = undefined;
    colaborador.tempProblemasIds = undefined;
    await colaborador.save();
    
    // Buscar resumo contextual
    const resumo = await gerarResumoContextual(colaborador, 'menu');
    
    return {
      resposta: `üì± MENU PRINCIPAL DO STARTIA

${saudacao}
${resumo}

O que voc√™ deseja fazer hoje?

üìã OBRAS
1Ô∏è‚É£ Criar nova obra  
2Ô∏è‚É£ Entrar em obra existente  

‚è±Ô∏è SEU DIA DE TRABALHO
3Ô∏è‚É£ Ver minhas tarefas pendentes  
4Ô∏è‚É£ Registrar entrada/sa√≠da na obra

üë∑‚Äç‚ôÇÔ∏è GERENCIAMENTO  
5Ô∏è‚É£ Cadastrar nova tarefa  
6Ô∏è‚É£ Adicionar colaborador  
7Ô∏è‚É£ Ver equipe da obra  

‚ö†Ô∏è PROBLEMAS
9Ô∏è‚É£ Relatar um problema
üîü Ver problemas reportados

‚ÑπÔ∏è Digite 8Ô∏è‚É£ para conhecer mais sobre o StartIA`,
      etapaNova: 'menu'
    };
  }

  // ===== PROCESSAMENTO DOS ESTADOS ESPEC√çFICOS =====
  
  switch (colaborador.etapaCadastro) {
    // ‚úÖ NOVO ESTADO PARA COLETAR NOME
    case 'coletando_nome':
      if (!mensagemTexto || mensagemTexto.trim().length < 2) {
        return {
          resposta: `‚ö†Ô∏è Por favor, digite um nome v√°lido com pelo menos 2 caracteres.

üë§ *Como voc√™ gostaria de ser chamado?*
(Ex: "Jo√£o Silva" ou "Maria")`,
          etapaNova: 'coletando_nome'
        };
      }
      
      try {
        await definirNomeColaborador(colaborador._id, mensagemTexto.trim());
        
        // Recarregar colaborador para ter nome atualizado
        const Colaborador = require('../../domains/colaborador/colaborador.model');
        const colaboradorAtualizado = await Colaborador.findById(colaborador._id);
        const saudacaoAtualizada = obterSaudacao(colaboradorAtualizado);
        
        return {
          resposta: `‚úÖ Muito prazer, *${colaboradorAtualizado.nome}*!

üèóÔ∏è *STARTIA - SEU ASSISTENTE DE OBRAS*

Comigo voc√™ pode:
‚úîÔ∏è Criar e organizar obras  
‚úîÔ∏è Cadastrar e acompanhar tarefas  
‚úîÔ∏è Controlar presen√ßas da equipe  
‚úîÔ∏è Visualizar tudo com clareza

üéØ Nosso objetivo √© evitar bagun√ßa e melhorar a comunica√ß√£o na sua obra.

Vamos come√ßar?

üìã MENU INICIAL:
1Ô∏è‚É£ Criar nova obra  
2Ô∏è‚É£ Entrar em uma obra existente

üí° Digite "ajuda" a qualquer momento para ver os comandos dispon√≠veis.`,
          etapaNova: 'menu'
        };
      } catch (error) {
        console.error('‚ùå Erro ao definir nome:', error);
        return {
          resposta: `‚ùå Erro ao salvar seu nome. Tente novamente.

üë§ *Como voc√™ gostaria de ser chamado?*`,
          etapaNova: 'coletando_nome'
        };
      }
    
    case 'menu':
      // Comandos r√°pidos para o menu
      if (comando === 'tarefas' || comando === 'minhas tarefas') {
        return await estadoVerTarefas(colaborador);
      } else if (comando === 'presen√ßa' || comando === 'presenca') {
        colaborador.subEstado = colaborador.obras ? colaborador.obras[0] : null;
        return {
          resposta: `üìù REGISTRO DE PRESEN√áA

${saudacao} Escolha uma op√ß√£o:
1Ô∏è‚É£ Registrar ENTRADA agora (in√≠cio de expediente)
2Ô∏è‚É£ Registrar SA√çDA agora (fim de expediente)

üïí Para verificar seu status de hoje, digite "status"
0Ô∏è‚É£ Voltar ao menu principal`,
          etapaNova: 'registrando_presenca'
        };
      } else if (comando === 'equipe' || comando === 'colaboradores') {
        return await estadoVerColaboradores(colaborador);
      } else if (comando === 'problema' || comando === 'relatar') {
        colaborador.subEstado = 'descricao';
        return {
          resposta: `‚ö†Ô∏è RELATAR PROBLEMA NA OBRA

${saudacao} Conte-nos o que est√° acontecendo.

üìù Por favor, descreva detalhadamente o problema:
- Onde est√° ocorrendo?
- O que est√° acontecendo?
- Qual a urg√™ncia?`,
          etapaNova: 'relatando_problema_descricao'
        };
      } else if (comando === 'resumo') {
        return {
          resposta: await gerarResumoContextual(colaborador, 'menu'),
          etapaNova: 'menu'
        };
      }
      
      return await estadoMenu(colaborador, mensagemTexto);

    // ===== ESTADOS DE CRIA√á√ÉO DE OBRA =====
    case 'criando_obra_nome':
    case 'criando_obra_endereco':
    case 'criando_obra_almoco_inicio':
    case 'criando_obra_almoco_hora_inicio':
    case 'criando_obra_almoco_hora_fim':
    case 'confirmando_obra_duplicata':
      return await estadoCriandoObra(colaborador, mensagemTexto);

    // ===== ESTADOS DE ENTRADA EM OBRA =====
    case 'entrando_obra_codigo':
      return await estadoEntrandoObra(colaborador, mensagemTexto);
      
    // ===== ESTADO EM OBRA =====
    case 'em_obra':
      // Comandos r√°pidos para estado em obra
      if (comando === 'entrada' || comando === 'entrar') {
        colaborador.subEstado = colaborador.obras ? colaborador.obras[0] : null;
        const resultadoPresenca = await estadoRegistrarPresenca(colaborador, '1', null);
        return {
          resposta: resultadoPresenca.resposta,
          etapaNova: 'menu'
        };
      } else if (comando === 'sa√≠da' || comando === 'saida' || comando === 'sair') {
        colaborador.subEstado = colaborador.obras ? colaborador.obras[0] : null;
        const resultadoPresenca = await estadoRegistrarPresenca(colaborador, '2', null);
        return {
          resposta: resultadoPresenca.resposta,
          etapaNova: 'menu'
        };
      }
      
      return await estadoEmObra(colaborador, mensagemTexto);

    // ===== ESTADOS DE TAREFAS =====
    case 'ver_tarefas':
      return await estadoVerTarefas(colaborador, mensagemTexto);
      
    case 'ver_tarefa_detalhe':
      return await estadoVerTarefaDetalhe(colaborador, mensagemTexto);

    case 'criando_tarefa_titulo':
    case 'criando_tarefa_descricao':
    case 'criando_tarefa_prazo':
    case 'criando_tarefa_atribuicao':
      return await estadoCriandoTarefa(colaborador, mensagemTexto);

    // ===== ESTADOS DE COLABORADORES =====
    case 'cadastrando_colab_nome':
    case 'cadastrando_colab_telefone':
    case 'cadastrando_colab_tipo':
    case 'cadastrando_colab_funcao':
      return await estadoCadastrarColaborador(colaborador, mensagemTexto);

    case 'ver_colaboradores':
      return await estadoVerColaboradores(colaborador, mensagemTexto);

    // ===== ESTADO DE PRESEN√áA =====
    case 'registrando_presenca':
      // Pegar a obra atual do colaborador, se existir
      let obraAtual = null;
      if (colaborador.subEstado && mongoose.Types.ObjectId.isValid(colaborador.subEstado)) {
        const Obra = require('../../domains/obra/obra.model');
        console.log(`üîç Buscando obra com ID: ${colaborador.subEstado}`);
        obraAtual = await Obra.findById(colaborador.subEstado);
        if (obraAtual) {
          console.log(`‚úÖ Obra encontrada: ${obraAtual.nome}`);
        } else {
          console.log(`‚ùå Obra n√£o encontrada com ID: ${colaborador.subEstado}`);
        }
      }
      
      // Comandos r√°pidos para presen√ßa
      if (comando === 'entrada' || comando === 'entrar') {
        mensagemTexto = '1';
      } else if (comando === 'sa√≠da' || comando === 'saida' || comando === 'sair') {
        mensagemTexto = '2';
      } else if (comando.includes('status')) {
        mensagemTexto = 'status';
      }
      
      // Usar o m√≥dulo refatorado de registro de presen√ßa
      const resultadoPresenca = await estadoRegistrarPresenca(colaborador, mensagemTexto, obraAtual);
      
      return {
        resposta: resultadoPresenca.resposta,
        etapaNova: resultadoPresenca.proximoEstado || 'registrando_presenca'
      };

    // ===== ESTADO DE GUIA =====
    case 'guia_startia':
      return await estadoGuiaStartIA(colaborador, mensagemTexto);
      
    // ===== ESTADOS DE PROBLEMAS =====
    case 'relatando_problema_descricao':
    case 'relatando_problema_foto':
      return await estadoRelatandoProblema(colaborador, mensagemTexto, contexto);
      
    case 'vendo_problemas':
      return await estadoVerProblemas(colaborador, mensagemTexto);

    // ===== FALLBACK DE SEGURAN√áA =====
    default:
      console.warn(`‚ö†Ô∏è Estado desconhecido: ${colaborador.etapaCadastro}. Resetando para menu.`);
      
      // Limpar dados tempor√°rios antes de resetar
      try {
        const Colaborador = require('../../domains/colaborador/colaborador.model');
        const colaboradorCompleto = await Colaborador.findById(colaborador._id);
        if (colaboradorCompleto && colaboradorCompleto.limparDadosTemporarios) {
          await colaboradorCompleto.limparDadosTemporarios();
        }
      } catch (error) {
        console.error('‚ùå Erro ao limpar dados tempor√°rios:', error);
      }
      
      colaborador.etapaCadastro = 'menu';
      await colaborador.save();

      return {
        resposta: `‚ö†Ô∏è ERRO DE SISTEMA

${saudacao} Ocorreu um erro ou estado desconhecido.
Retornamos voc√™ ao menu principal para sua seguran√ßa.

üì± MENU PRINCIPAL:
1Ô∏è‚É£ Criar nova obra
2Ô∏è‚É£ Entrar em obra existente
3Ô∏è‚É£ Ver minhas tarefas
4Ô∏è‚É£ Registrar presen√ßa
5Ô∏è‚É£ Cadastrar tarefa
6Ô∏è‚É£ Adicionar colaborador
7Ô∏è‚É£ Ver equipe da obra
8Ô∏è‚É£ O que √© o StartIA?
9Ô∏è‚É£ Relatar problema
üîü Ver problemas

üí° Digite "ajuda" a qualquer momento para ver os comandos dispon√≠veis.`,
        etapaNova: 'menu'
      };
  }
}

module.exports = { fsmResponder };