const { verificarStatusPresenca, registrarEntrada, registrarSaida } = require('../../../domains/presenca/presenca.service');
const { templates } = require('../../../utils/mensagensConfirmacao');

/**
 * Handler para estado de registro de presen√ßa
 * @param {Object} colaborador - Objeto colaborador do MongoDB
 * @param {String} mensagemTexto - Texto da mensagem recebida
 * @param {Object} obra - Objeto obra (opcional)
 * @returns {Promise<Object>} Resposta e pr√≥ximo estado
 */
async function estadoRegistrarPresenca(colaborador, mensagemTexto, obra = null) {
  // Obter nome do colaborador para personaliza√ß√£o
  const nomeColaborador = colaborador.nome ? `${colaborador.nome}` : '';
  
  // Se n√£o tem obra selecionada, verificar situa√ß√£o das obras do colaborador
  if (!obra) {
    // Verificar se colaborador tem obras associadas
    if (!colaborador.obras || colaborador.obras.length === 0) {
      return {
        resposta: `‚ùå ACESSO INDISPON√çVEL

${nomeColaborador ? `Ol√°, ${nomeColaborador}!` : 'Ol√°!'} 
Voc√™ ainda n√£o est√° vinculado a nenhuma obra.

Para acessar essa fun√ß√£o:
1Ô∏è‚É£ Crie uma obra (digite "1")
2Ô∏è‚É£ Entre em uma obra existente (digite "2")`,
        proximoEstado: 'menu'
      };
    }
    
    // Se tem apenas uma obra, selecionar automaticamente
    if (colaborador.obras.length === 1) {
      const obraId = colaborador.obras[0];
      return handleRegistroPresenca(colaborador, mensagemTexto, obraId);
    }
    
    // Caso tenha m√∫ltiplas obras, pedir para selecionar
    return {
      resposta: `‚ö†Ô∏è M√öLTIPLAS OBRAS ENCONTRADAS

${nomeColaborador ? `Ol√°, ${nomeColaborador}!` : 'Ol√°!'} 
Voc√™ est√° vinculado a v√°rias obras.

Como proceder:
1. Volte ao menu principal (digite "menu")
2. Selecione a op√ß√£o 2Ô∏è‚É£ para escolher uma obra espec√≠fica
3. Depois acesse a op√ß√£o 4Ô∏è‚É£ novamente`,
      proximoEstado: 'menu'
    };
  }
  
  // Se tem obra, processar registro
  return handleRegistroPresenca(colaborador, mensagemTexto, obra._id);
}

/**
 * Formata hora atual para exibi√ß√£o
 * @returns {String} Hora formatada
 */
function obterHoraAtual() {
  return new Date().toLocaleTimeString('pt-BR', {
    hour: '2-digit',
    minute: '2-digit'
  });
}

/**
 * Processa o registro de presen√ßa
 * @param {Object} colaborador - Objeto colaborador
 * @param {String} mensagemTexto - Texto da mensagem
 * @param {String} obraId - ID da obra
 * @returns {Promise<Object>} Resposta e pr√≥ximo estado
 */
async function handleRegistroPresenca(colaborador, mensagemTexto, obraId) {
  try {
    // Verificar status atual de presen√ßa
    const status = await verificarStatusPresenca(colaborador._id, obraId);
    
    // Obter nome do colaborador para personaliza√ß√£o
    const nomeColaborador = colaborador.nome ? `${colaborador.nome}` : '';
    
    // Obter nome da obra se poss√≠vel
    let nomeObra = "";
    if (obraId) {
      try {
        const Obra = require('../../../domains/obra/obra.model');
        const obraEncontrada = await Obra.findById(obraId);
        if (obraEncontrada) {
          nomeObra = obraEncontrada.nome;
        }
      } catch (error) {
        console.error('Erro ao buscar nome da obra:', error);
      }
    }
    
    // Normalizar mensagem para processamento
    const comando = mensagemTexto.toLowerCase().trim();
    
    // Se mensagem √© apenas consulta de status
    if (comando.includes('status') || 
        comando.includes('como estou') ||
        comando === '?') {
      return {
        resposta: formatarRespostaStatus(status, nomeObra, nomeColaborador),
        proximoEstado: 'registrando_presenca'
      };
    }
    
    // Verificar comandos de entrada
    const comandosEntrada = ['entrar', 'entrada', 'cheguei', '1'];
    const isComandoEntrada = comandosEntrada.some(cmd => comando.includes(cmd)) || comando === '1';
    
    // Verificar comandos de sa√≠da
    const comandosSaida = ['sair', 'saida', 'sa√≠da', 'sai', '2'];
    const isComandoSaida = comandosSaida.some(cmd => comando.includes(cmd)) || comando === '2';
    
    // Registrar entrada
    if (isComandoEntrada && status.status !== 'trabalhando') {
      const resultado = await registrarEntrada(colaborador._id, obraId);
      
      if (!resultado.sucesso) {
        return {
          resposta: `‚ùå OPERA√á√ÉO N√ÉO REALIZADA

N√£o foi poss√≠vel registrar sua entrada: ${resultado.mensagem}

Por favor, tente novamente ou contate o administrador.
Digite qualquer tecla para voltar ao menu.`,
          proximoEstado: 'menu'
        };
      }
      
      const horaAtual = obterHoraAtual();
      
      // Usar template de mensagem de confirma√ß√£o
      if (templates && templates.presencaRegistrada) {
        const mensagemEntrada = templates.presencaRegistrada('entrada', horaAtual);
        return {
          resposta: `${mensagemEntrada}\n\nüèóÔ∏è Obra: ${nomeObra || "Obra atual"}\n\n${nomeColaborador ? `Bom trabalho, ${nomeColaborador}!` : 'Bom trabalho!'} Lembre-se de registrar sua sa√≠da quando terminar o expediente.`,
          proximoEstado: 'menu'
        };
      }
      
      // Fallback caso o template n√£o esteja dispon√≠vel
      return {
        resposta: `‚úÖ ENTRADA REGISTRADA COM SUCESSO!
‚è∞ Hora de in√≠cio: ${horaAtual}
üèóÔ∏è Obra: ${nomeObra || "Obra atual"}

${nomeColaborador ? `Bom trabalho, ${nomeColaborador}!` : 'Bom trabalho!'} 

Quando terminar seu expediente, volte ao menu principal e selecione a op√ß√£o 4 para registrar sua sa√≠da.

üëâ Dica: voc√™ pode ver suas tarefas digitando "3" no menu principal.`,
        proximoEstado: 'menu'
      };
    }
    
    // Registrar sa√≠da
    if (isComandoSaida && status.status === 'trabalhando') {
      const resultado = await registrarSaida(colaborador._id, obraId);
      
      if (!resultado.sucesso) {
        return {
          resposta: `‚ùå OPERA√á√ÉO N√ÉO REALIZADA

N√£o foi poss√≠vel registrar sua sa√≠da: ${resultado.mensagem}

Por favor, tente novamente ou contate o administrador.
Digite qualquer tecla para voltar ao menu.`,
          proximoEstado: 'menu'
        };
      }
      
      // Formatar horas trabalhadas com precis√£o de 2 casas decimais
      const horasFormatadas = resultado.horasTrabalhadas.toFixed(2);
      const horaAtual = obterHoraAtual();
      
      // Usar template de mensagem de confirma√ß√£o
      if (templates && templates.presencaRegistrada) {
        const mensagemSaida = templates.presencaRegistrada('saida', horaAtual, `${horasFormatadas}h${resultado.descontoAlmoco ? ' (com desconto de almo√ßo)' : ''}`);
        return {
          resposta: `${mensagemSaida}\n\nüèóÔ∏è Obra: ${nomeObra || "Obra atual"}\n\n${nomeColaborador ? `Obrigado pelo seu trabalho hoje, ${nomeColaborador}!` : 'Obrigado pelo seu trabalho hoje!'} Descanse bem.`,
          proximoEstado: 'menu'
        };
      }
      
      // Fallback caso o template n√£o esteja dispon√≠vel
      return {
        resposta: `‚úÖ EXPEDIENTE FINALIZADO!

Resumo do seu dia:
‚è∞ Entrada: ${formatarHora(status.horaEntrada)} - Sa√≠da: ${horaAtual}
‚è±Ô∏è Total de horas: ${horasFormatadas} horas trabalhadas${resultado.descontoAlmoco ? ' (com desconto de almo√ßo)' : ''}
üèóÔ∏è Obra: ${nomeObra || "Obra atual"}

${nomeColaborador ? `Obrigado pelo seu trabalho hoje, ${nomeColaborador}!` : 'Obrigado pelo seu trabalho hoje!'} Descanse bem.
Digite qualquer tecla para voltar ao menu principal.`,
        proximoEstado: 'menu'
      };
    }
    
    // Se solicitou menu, voltar para o menu
    if (comando === '0' || comando === 'menu' || comando === 'voltar') {
      return {
        resposta: "üîô Voltando ao menu principal...",
        proximoEstado: 'menu'
      };
    }
    
    // Se nenhum comando foi reconhecido, mostrar op√ß√µes
    return {
      resposta: formatarMenuPresenca(status, nomeObra, nomeColaborador),
      proximoEstado: 'registrando_presenca'
    };
  } catch (error) {
    console.error('‚ùå Erro ao registrar presen√ßa:', error);
    return {
      resposta: `‚ùå ERRO INESPERADO

Ops! Ocorreu um erro: ${error.message}

Por favor, tente novamente ou contate o suporte.
Digite qualquer tecla para voltar ao menu principal.`,
      proximoEstado: 'menu'
    };
  }
}

/**
 * Formata hora para exibi√ß√£o
 * @param {Date} data - Data a ser formatada
 * @returns {String} Hora formatada
 */
function formatarHora(data) {
  if (!data) return "--:--";
  
  const d = new Date(data);
  return d.toLocaleTimeString('pt-BR', {
    hour: '2-digit',
    minute: '2-digit'
  });
}

/**
 * Formata resposta de status
 * @param {Object} status - Objeto de status de presen√ßa
 * @param {String} nomeObra - Nome da obra
 * @param {String} nomeColaborador - Nome do colaborador
 * @returns {String} Mensagem formatada
 */
function formatarRespostaStatus(status, nomeObra, nomeColaborador) {
  const saudacao = nomeColaborador ? `${nomeColaborador}` : '';
  
  if (!status.presente) {
    return `üìä SEU STATUS ATUAL ${saudacao ? `(${saudacao})` : ''}:

‚ùå Voc√™ ainda n√£o registrou entrada hoje
üèóÔ∏è Obra: ${nomeObra || "Obra atual"}

Para iniciar seu expediente, digite "1" para registrar entrada.`;
  }
  
  if (status.status === 'trabalhando') {
    const horasFormatadas = status.horasPassadas.toFixed(1);
    return `üìä SEU STATUS ATUAL ${saudacao ? `(${saudacao})` : ''}:

‚úÖ Voc√™ est√° TRABALHANDO agora
‚è∞ Entrada registrada: ${formatarHora(status.horaEntrada)} (h√° ${horasFormatadas} horas)
üèóÔ∏è Obra: ${nomeObra || "Obra atual"}

Para registrar sua sa√≠da, digite "2".`;
  }
  
  if (status.status === 'concluido') {
    return `üìä SEU STATUS ATUAL ${saudacao ? `(${saudacao})` : ''}:

‚úÖ Voc√™ j√° encerrou seu expediente hoje
‚è∞ Entrada: ${formatarHora(status.horaEntrada)} 
‚è∞ Sa√≠da: ${formatarHora(status.horaSaida)}
‚è±Ô∏è Total trabalhado: ${status.horasTrabalhadas} horas
üèóÔ∏è Obra: ${nomeObra || "Obra atual"}

Bom descanso! At√© amanh√£.`;
  }
  
  return "Status desconhecido. Entre em contato com o suporte.";
}

/**
 * Formata menu de op√ß√µes de presen√ßa
 * @param {Object} status - Objeto de status de presen√ßa
 * @param {String} nomeObra - Nome da obra
 * @param {String} nomeColaborador - Nome do colaborador
 * @returns {String} Menu formatado
 */
function formatarMenuPresenca(status, nomeObra, nomeColaborador) {
  const saudacao = nomeColaborador ? `Ol√°, ${nomeColaborador}!` : '';
  const obraTxt = nomeObra ? `\nüèóÔ∏è Obra: ${nomeObra}` : '';
  
  if (!status.presente) {
    return `üìù REGISTRO DE PRESEN√áA${obraTxt}
${saudacao ? `\n${saudacao}` : ''}

Voc√™ ainda n√£o registrou presen√ßa hoje.

1Ô∏è‚É£ Registrar ENTRADA agora (in√≠cio de expediente)
0Ô∏è‚É£ Voltar ao menu principal

Digite "status" a qualquer momento para verificar sua situa√ß√£o.`;
  }
  
  if (status.status === 'trabalhando') {
    const horasFormatadas = status.horasPassadas.toFixed(1);
    return `üìù REGISTRO DE PRESEN√áA${obraTxt}
${saudacao ? `\n${saudacao}` : ''}

‚úÖ Voc√™ est√° trabalhando h√° ${horasFormatadas} horas 
   (entrada √†s ${formatarHora(status.horaEntrada)})

2Ô∏è‚É£ Registrar SA√çDA agora (fim de expediente)
0Ô∏è‚É£ Voltar ao menu principal`;
  }
  
  if (status.status === 'concluido') {
    return `üìù REGISTRO DE PRESEN√áA${obraTxt}
${saudacao ? `\n${saudacao}` : ''}

‚úÖ Voc√™ j√° concluiu seu expediente hoje!
‚è±Ô∏è Total trabalhado: ${status.horasTrabalhadas} horas
   (entrada: ${formatarHora(status.horaEntrada)}, sa√≠da: ${formatarHora(status.horaSaida)})

0Ô∏è‚É£ Voltar ao menu principal`;
  }
  
  return "Status desconhecido. Entre em contato com o suporte.";
}

module.exports = estadoRegistrarPresenca;